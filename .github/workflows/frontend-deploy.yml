name: Frontend - Build and Deploy to ECR
on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to manage"
        required: true
        default: DEV
        type: choice
        options:
          - DEV
          - STAGING
          - PROD
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/frontend
    permissions:
      contents: read
      id-token: write  # Required for OIDC
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set environment variables
        run: |
          case "${{ github.event.inputs.env }}" in
            DEV)
              echo "AWS_REGION=${{ vars.AWS_REGION_TF_DEV }}" >> $GITHUB_ENV
              echo "AWS_ROLE_TO_ASSUME=${{ secrets.AWS_ROLE_TO_ASSUME_TF_DEV }}" >> $GITHUB_ENV
              echo "ECR_REPOSITORY_FRONTEND=${{ secrets.ECR_REPOSITORY_FRONTEND_TF_DEV }}" >> $GITHUB_ENV

              #echo "AWS_ROLE_TO_ASSUME=${{ vars.AWS_ROLE_TO_ASSUME_TF_DEV }}" >> $GITHUB_ENV
              #echo "ECR_REPOSITORY_FRONTEND=${{ vars.ECR_REPOSITORY_FRONTEND_TF_DEV }}" >> $GITHUB_ENV
              ;;
            STAGING)
              echo "AWS_REGION=${{ vars.AWS_REGION_TF_STAGING }}" >> $GITHUB_ENV
              echo "AWS_ROLE_TO_ASSUME=${{ secrets.AWS_ROLE_TO_ASSUME_TF_STAGING }}" >> $GITHUB_ENV
              echo "ECR_REPOSITORY_FRONTEND=${{ secrets.ECR_REPOSITORY_FRONTEND_TF_STAGING }}" >> $GITHUB_ENV
              ;;
            PROD)
              echo "AWS_REGION=${{ vars.AWS_REGION_TF_PROD }}" >> $GITHUB_ENV
              echo "AWS_ROLE_TO_ASSUME=${{ secrets.AWS_ROLE_TO_ASSUME_TF_PROD }}" >> $GITHUB_ENV
              echo "ECR_REPOSITORY_FRONTEND=${{ secrets.ECR_REPOSITORY_FRONTEND_TF_PROD }}" >> $GITHUB_ENV
              ;;
          esac
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Debug Echo
        run: |
          echo "AWS_REGION ${{ env.AWS_REGION}} "
          echo "AWS_ROLE_TO_ASSUME ${{ env.AWS_ROLE_TO_ASSUME}} "
          echo "ECR_REPOSITORY_FRONTEND ${{ env.ECR_REPOSITORY_FRONTEND}} "
          aws sts get-caller-identity
      
      - name: Create debug file
        run: |
          echo "AWS_ROLE_TO_ASSUME=${{ secrets.AWS_ROLE_TO_ASSUME_TF_DEV }}" > secrets-debug.txt
          echo "ECR_REPOSITORY_FRONTEND=${{ secrets.ECR_REPOSITORY_FRONTEND_TF_DEV }}" >> secrets-debug.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: secrets-dump
          path: secrets-debug.txt
      
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
      
      - name: Set image tagging variables
        run: |
          IMAGE_BASE="${{ env.ECR_REPOSITORY_FRONTEND }}"
          TAG="${{ github.run_id }}-${{ steps.vars.outputs.sha_short }}"
          IMAGE_URI="${IMAGE_BASE}:${TAG}"
          echo "IMAGE_BASE=$IMAGE_BASE" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
      
      - name: Build and push Docker image
        run: |
          docker build --no-cache -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
      
      - name: Capture image digest
        id: digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_URI")
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
      
      - name: Output summary
        run: |
          echo "Frontend image built and pushed:"
          echo "- Image: ${{ steps.digest.outputs.digest }}"