#version: '3.9'
services:


  postgres:
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_TABLE: ${POSTGRES_TABLE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ./postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - pgdata:/var/lib/postgresql/data


  localstack:
    image: ${LOCALSTACK_IMAGE}
    environment:
      SERVICES: ${LOCALSTACK_SERVICES}
      QUEUE_NAME: ${QUEUE_NAME}
    ports:
      - "${LOCALSTACK_PORT}:${LOCALSTACK_PORT}"
    volumes:
      - localstack:/var/lib/localstack
      - ./localstack/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh
    entrypoint: ["sh", "-c", "chmod +x /etc/localstack/init/ready.d/init-aws.sh && docker-entrypoint.sh"]


  s3-init:
    image: ${AWS_CLI_IMAGE}
    container_name: ${S3_CONTAINER_NAME}
    depends_on:
      - localstack
    entrypoint: >
      sh -c '
        echo "Waiting for LocalStack to be ready...";
        max_retries=40
        count=0
        until curl -s http://${LOCALSTACK_HOST}:${LOCALSTACK_PORT}/_localstack/health | grep "\"s3\": \"available\"" > /dev/null; do
          sleep 2
          count=$$((count + 1))
          if [ $$count -ge $$max_retries ]; then
            echo "ERROR: Timed out waiting for LocalStack to be ready."
            exit 1
          fi
        done
        echo "Creating S3 bucket...";
        aws --endpoint-url=http://${LOCALSTACK_HOST}:${LOCALSTACK_PORT} --region ${AWS_REGION} s3 mb s3://${S3_BUCKET_NAME} || true
      '
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}


  lambda-mock:
    build:
      context: ./lambda-mock
    depends_on:
      - s3-init
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_ENDPOINT: ${AWS_ENDPOINT}
      SQS_QUEUE_URL: ${SQS_QUEUE_URL}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}

      
  # backend:
  #   build:
  #     context: ../app/backend
  #   depends_on:
  #     - postgres
  #     - localstack
  #   ports:
  #     - "${BACKEND_PORT}:${BACKEND_PORT}"
  #   environment:
  #     DB_HOST: ${DB_HOST_DOCKER}
  #     DB_PORT: ${POSTGRES_PORT}
  #     DB_USER: ${POSTGRES_USER}
  #     DB_PASSWORD: ${POSTGRES_PASSWORD}
  #     DB_NAME: ${POSTGRES_DB}
  #     POSTGRES_TABLE: ${POSTGRES_TABLE}
  #     AWS_REGION: ${AWS_REGION}
  #     SQS_QUEUE_URL: ${SQS_QUEUE_URL}
  #     AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  #     AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  #     BACKEND_HOST_ADDRESS: ${BACKEND_HOST_ADDRESS}
  #     FRONTEND_HOST_ADDRESS: ${FRONTEND_HOST_ADDRESS}

  # frontend:
  #   build:
  #     context: ../app/frontend
  #     dockerfile: Dockerfile
  #   depends_on:
  #   - backend
  #   ports:
  #   - "${FRONTEND_PORT}:${FRONTEND_PORT}"
  #   environment:
  #     BACKEND_URL: ${REACT_APP_BACKEND_URL}


volumes:
  pgdata:
  localstack: