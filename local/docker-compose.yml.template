#version: '3.9'
services:


  ${DOCKER_COMPOSE_POSTGRES_SERVICE_NAME}:
    profiles: ["docker_only","docker_and_kubernetes"]
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_TABLE: ${POSTGRES_TABLE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ${POSTGRES_FOLDER_PATH}/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - pgdata:/var/lib/postgresql/data


  ${DOCKER_COMPOSE_LOCALSTACK_SERVICE_NAME}:
    profiles: ["docker_only","docker_and_kubernetes"]
    image: ${LOCALSTACK_IMAGE}
    environment:
      SERVICES: ${LOCALSTACK_SERVICES}
      QUEUE_NAME: ${QUEUE_NAME}
    ports:
      - "${LOCALSTACK_PORT}:${LOCALSTACK_PORT}"
    volumes:
      - localstack:/var/lib/localstack
      - ${LOCALSTACK_FOLDER_PATH}/init-aws.sh:/tmp/init-aws.sh:ro
    entrypoint:
    - sh
    - -c
    - |
      mkdir -p /etc/localstack/init/ready.d
      cp /tmp/init-aws.sh /etc/localstack/init/ready.d/init-aws.sh
      chmod +x /etc/localstack/init/ready.d/init-aws.sh
      docker-entrypoint.sh


  ${DOCKER_COMPOSE_S3_INIT_SERVICE_NAME}:
    profiles: ["docker_only","docker_and_kubernetes"]
    image: ${AWS_CLI_IMAGE}
    container_name: ${S3_CONTAINER_NAME}
    depends_on:
      - ${DOCKER_COMPOSE_LOCALSTACK_SERVICE_NAME}
    entrypoint: >
      sh -c '
        echo "Waiting for LocalStack to be ready...";
        max_retries=40
        count=0
        until curl -s http://${DOCKER_COMPOSE_LOCALSTACK_SERVICE_NAME}:${LOCALSTACK_PORT}/_localstack/health | grep "\"s3\": \"available\"" > /dev/null; do
          sleep 2
          count=$$((count + 1))
          if [ $$count -ge $$max_retries ]; then
            echo "ERROR: Timed out waiting for LocalStack to be ready."
            exit 1
          fi
        done
        echo "Creating S3 bucket...";
        aws --endpoint-url=http://${DOCKER_COMPOSE_LOCALSTACK_SERVICE_NAME}:${LOCALSTACK_PORT} --region ${AWS_REGION} s3 mb s3://${S3_BUCKET_NAME} || true
      '
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}


  ${DOCKER_COMPOSE_LAMBDA_MOCK_SERVICE_NAME}:
    profiles: ["docker_only","docker_and_kubernetes"]
    build:
      context: ${LAMBDA_MOCK_FOLDER_PATH}
    depends_on:
      - ${DOCKER_COMPOSE_S3_INIT_SERVICE_NAME}
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_ENDPOINT: ${AWS_ENDPOINT}
      SQS_QUEUE_URL: ${SQS_QUEUE_URL}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}

      
  ${DOCKER_COMPOSE_BACKEND_APP_SERVICE_NAME}:
    profiles: ["docker_only"]
    build:
      context: ${BACKEND_APP_FOLDER_PATH}
    depends_on:
      - ${DOCKER_COMPOSE_POSTGRES_SERVICE_NAME}
      - ${DOCKER_COMPOSE_LOCALSTACK_SERVICE_NAME}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      DB_HOST: ${DOCKER_COMPOSE_POSTGRES_SERVICE_NAME}
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      POSTGRES_TABLE: ${POSTGRES_TABLE}
      AWS_REGION: ${AWS_REGION}
      SQS_QUEUE_URL: ${SQS_QUEUE_URL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      BACKEND_HOST_ADDRESS: ${DOCKER_COMPOSE_BACKEND_APP_SERVICE_NAME}
      FRONTEND_HOST_ADDRESS: ${FRONTEND_HOST_ADDRESS}

  ${DOCKER_COMPOSE_FRONTEND_APP_SERVICE_NAME}:
    profiles: ["docker_only"]
    build:
      context: ${FRONTEND_APP_FOLDER_PATH}
      dockerfile: Dockerfile
    depends_on:
    - ${DOCKER_COMPOSE_BACKEND_APP_SERVICE_NAME}
    ports:
    - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}


volumes:
  pgdata:
  localstack: