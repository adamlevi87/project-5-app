# This file is used by .generate-env.sh to generate the full variable list
# to later be used by docker compose (.env) or helm upgrade using *.local.yaml
# .generate-env.sh will also create new variables by combining variables from this file


# AWS Variables
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=test
AWS_SECRET_ACCESS_KEY=test

# POSTGRES Variables
POSTGRES_VERSION=14
POSTGRES_TABLE=messages
POSTGRES_USER=myapp
POSTGRES_PASSWORD=password
POSTGRES_DB=myapp_db
POSTGRES_PORT=5432

# Docker Compose Variables
DOCKER_COMPOSE_POSTGRES_SERVICE_NAME=postgres
POSTGRES_FOLDER_PATH=./docker/postgres
DOCKER_COMPOSE_LOCALSTACK_SERVICE_NAME=localstack
LOCALSTACK_FOLDER_PATH=./docker/localstack
DOCKER_COMPOSE_S3_INIT_SERVICE_NAME=s3-init
DOCKER_COMPOSE_LAMBDA_MOCK_SERVICE_NAME=lambda-mock
LAMBDA_MOCK_FOLDER_PATH=./docker/lambda-mock
DOCKER_COMPOSE_BACKEND_APP_SERVICE_NAME=backend
BACKEND_APP_FOLDER_PATH=../app/backend
DOCKER_COMPOSE_FRONTEND_APP_SERVICE_NAME=frontend
FRONTEND_APP_FOLDER_PATH=../app/frontend

# LocalStack Variables
LOCALSTACK_IMAGE=localstack/localstack
LOCALSTACK_SERVICES=sqs,s3
QUEUE_NAME=my-queue
LOCALSTACK_PORT=4566

# the IP of the VM running docker
    LOCALSTACK_HOST_EXTERNAL=192.168.241.128
#

# s3-init Variables
AWS_CLI_IMAGE=amazon/aws-cli
S3_CONTAINER_NAME=s3-init
S3_BUCKET_NAME=myapp-bucket

# Backend Variables
BACKEND_PORT=3000

# the IP of the VM running docker
    DB_HOST_EXTERNAL=192.168.241.128
#

# Frontend Variables
FRONTEND_PORT=80

# Repository URL - local-dockerhub IP
REPOSITORY_ADDRESS=192.168.241.128
REPOSITORY_PORT=5000

# Ingress Controller
INGRESS_REPO_NAME=ingress-nginx
INGRESS_REPO_URL=https://kubernetes.github.io/ingress-nginx
INGRESS_CONTROLLER_SERVICE_TYPE=NodePort
INGRESS_CONTROLLER_CLASS_RESOURCE_NAME=nginx
INGRESS_CONTROLLER_EXTERNAL_PORT_HTTP=30080
INGRESS_CONTROLLER_EXTERNAL_PORT_HTTPS=30443

# This Variable is the TargetPort of the ingress controller (default 80)
# its also set as the Port of the services created for the both releases [frontend backend]
# this allows the ingress controller to forward traffic to the services
# then each of them uses TargetPort to forward traffic to their pods/apps
INGRESS_CONTROLLER_TARGET_PORT_AND_SERVICES_PORT=80

# Backend on k8s locally
BACKEND_NAMESPACE=backend
BACKEND_REPOSITORY_NAME=backend
BACKEND_REPOSITORY_TAG=latest
BACKEND_HPA_ENABLED=true
BACKEND_REPLICA_COUNT_MIN=1
BACKEND_REPLICA_COUNT_MAX=2
BACKEND_HPA_CPU_SCALE=70
BACKEND_REQUEST_CPU=100m
BACKEND_REQUEST_MEMORY=128Mi
BACKEND_LIMIT_CPU=250m
BACKEND_LIMIT_MEMORY=512Mi
BACKEND_SERVICE_TYPE=ClusterIP
BACKEND_INGRESS_ENABLED=true
BACKEND_REWRITE_TARGET=nginx.ingress.kubernetes.io/rewrite-target
BACKEND_REWRITE_VALUE=/submit
BACKEND_INGRESS_PATH=/submit

# Frontend on k8s locally
FRONTEND_NAMESPACE=frontend
FRONTEND_REPOSITORY_NAME=frontend
FRONTEND_REPOSITORY_TAG=latest
FRONTEND_HPA_ENABLED=true
FRONTEND_REPLICA_COUNT_MIN=1
FRONTEND_REPLICA_COUNT_MAX=2
FRONTEND_HPA_CPU_SCALE=70
FRONTEND_REQUEST_CPU=100m
FRONTEND_REQUEST_MEMORY=128Mi
FRONTEND_LIMIT_CPU=250m
FRONTEND_LIMIT_MEMORY=512Mi
FRONTEND_SERVICE_TYPE=ClusterIP
FRONTEND_INGRESS_ENABLED=true
FRONTEND_REWRITE_TARGET=nginx.ingress.kubernetes.io/rewrite-target
FRONTEND_REWRITE_VALUE=/
FRONTEND_INGRESS_PATH=/

# initialize.sh -script values
NGINX_OPTION=nginx
NGINX_RELEASE_NAME=ingress-controller
NGINX_CHART_NAME=ingress-nginx
NGINX_NAMESPACE=ingress-nginx
NGINX_HELM_FOLDER_PATH=./helm/infra/ingress-nginx
BACKEND_OPTION=backend
BACKEND_RELEASE_NAME=backend
BACKEND_HELM_VALUES_FOLDER_PATH=./helm/base-app/values
BACKEND_HELM_TEMPLATE_FOLDER_PATH=./helm/base-app/generic
FRONTEND_OPTION=frontend
FRONTEND_RELEASE_NAME=frontend
FRONTEND_HELM_VALUES_FOLDER_PATH=./helm/base-app/values
FRONTEND_HELM_TEMPLATE_FOLDER_PATH=./helm/base-app/generic

# Skaffold settings
SKAFFOLD_PROJECT_NAME=project-5


